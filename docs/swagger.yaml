basePath: /
definitions:
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      userName:
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      created_utc:
        type: string
      deleted_utc:
        type: string
      email:
        type: string
      id:
        type: string
      password_hash:
        type: string
      profile_picture:
        type: string
      user_name:
        type: string
    type: object
  models.User:
    properties:
      created_utc:
        type: string
      email:
        type: string
      id:
        type: string
      profile_picture:
        type: string
      user_name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the base service for boondocks API
  title: Boondock-Service-Base API
  version: "1.0"
paths:
  /users:
    get:
      description: Get all users in the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns empty array if no users found
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: List all users
      tags:
      - users
  /users/{id}:
    get:
      description: Gets a user by UUID
      parameters:
      - description: User ID
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid UUID format
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get a user by id
      tags:
      - users
  /users/create:
    post:
      description: Creates a new User from provided json data
      parameters:
      - description: User
        format: models.CreateUserRequest
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
      summary: Create a new User
      tags:
      - users
  /users/update/:
    put:
      description: Updates a new User with the given id
      parameters:
      - description: User
        format: models.UpdateUserRequest
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
      summary: Updates a User by id
      tags:
      - users
swagger: "2.0"
